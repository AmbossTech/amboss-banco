/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
};

export type BroadcastLiquidTransaction = {
  __typename?: 'BroadcastLiquidTransaction';
  tx_id: Scalars['String']['output'];
};

export type BroadcastLiquidTransactionInput = {
  signed_pset: Scalars['String']['input'];
  wallet_account_id: Scalars['String']['input'];
};

export type ContactMessage = {
  __typename?: 'ContactMessage';
  contact_is_sender: Scalars['Boolean']['output'];
  created_at: Scalars['String']['output'];
  id: Scalars['String']['output'];
  payload: Scalars['String']['output'];
};

export type ContactMutations = {
  __typename?: 'ContactMutations';
  create: CreateContact;
  send_message: SendMessage;
};

export type ContactMutationsCreateArgs = {
  input: CreateContactInput;
};

export type ContactMutationsSend_MessageArgs = {
  input: SendMessageInput;
};

export type CreateAccountInput = {
  liquid_descriptor: Scalars['String']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  type: WalletAccountType;
};

export type CreateContact = {
  __typename?: 'CreateContact';
  id: Scalars['String']['output'];
};

export type CreateContactInput = {
  money_address: Scalars['String']['input'];
  wallet_id: Scalars['String']['input'];
};

export type CreateLiquidTransaction = {
  __typename?: 'CreateLiquidTransaction';
  base_64: Scalars['String']['output'];
  wallet_account: WalletAccount;
};

export type CreateOnchainAddress = {
  __typename?: 'CreateOnchainAddress';
  address: Scalars['String']['output'];
};

export type CreateOnchainAddressInput = {
  wallet_account_id: Scalars['String']['input'];
};

export type CreateWallet = {
  __typename?: 'CreateWallet';
  id: Scalars['String']['output'];
};

export type CreateWalletDetailsInput = {
  protected_mnemonic?: InputMaybe<Scalars['String']['input']>;
  type: WalletType;
};

export type CreateWalletInput = {
  accounts: Array<CreateAccountInput>;
  details: CreateWalletDetailsInput;
  name?: InputMaybe<Scalars['String']['input']>;
  secp256k1_key_pair: Secp256k1KeyPairInput;
};

export type FiatInfo = {
  __typename?: 'FiatInfo';
  fiat_to_btc?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
};

export type LiquidAccount = {
  __typename?: 'LiquidAccount';
  assets: Array<LiquidAsset>;
  id: Scalars['String']['output'];
  transactions: Array<LiquidTransaction>;
};

export type LiquidAsset = {
  __typename?: 'LiquidAsset';
  asset_id: Scalars['String']['output'];
  asset_info: LiquidAssetInfo;
  balance: Scalars['String']['output'];
  fiat_info: FiatInfo;
  id: Scalars['String']['output'];
};

export type LiquidAssetInfo = {
  __typename?: 'LiquidAssetInfo';
  id: Scalars['String']['output'];
  is_featured: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  precision: Scalars['Float']['output'];
  ticker: Scalars['String']['output'];
};

export type LiquidRecipientInput = {
  address: Scalars['String']['input'];
  amount: Scalars['String']['input'];
  asset_id?: InputMaybe<Scalars['String']['input']>;
};

export type LiquidTransaction = {
  __typename?: 'LiquidTransaction';
  asset_id: Scalars['String']['output'];
  asset_info: LiquidAssetInfo;
  balance: Scalars['String']['output'];
  blinded_url: Scalars['String']['output'];
  block_height?: Maybe<Scalars['String']['output']>;
  date?: Maybe<Scalars['String']['output']>;
  fee: Scalars['String']['output'];
  fiat_info: FiatInfo;
  id: Scalars['String']['output'];
  tx_id: Scalars['String']['output'];
  unblinded_url: Scalars['String']['output'];
};

export type LnAddressPaymentOption = {
  code: Scalars['String']['input'];
  network: Scalars['String']['input'];
};

export type LnUrlCurrency = {
  __typename?: 'LnUrlCurrency';
  code: PaymentOptionCode;
  decimals: Scalars['Float']['output'];
  fixed_fee: Scalars['String']['output'];
  id: Scalars['String']['output'];
  max_sendable?: Maybe<Scalars['String']['output']>;
  min_sendable?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  network: PaymentOptionNetwork;
  symbol: Scalars['String']['output'];
  variable_fee_percentage: Scalars['String']['output'];
};

export type LoginInput = {
  email: Scalars['String']['input'];
  master_password_hash: Scalars['String']['input'];
};

export type MoneyAddress = {
  __typename?: 'MoneyAddress';
  domains: Array<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  user: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  checkPassword: Scalars['Boolean']['output'];
  contacts: ContactMutations;
  login: NewAccount;
  logout: Scalars['Boolean']['output'];
  pay: PayMutations;
  refreshToken: RefreshToken;
  signUp: NewAccount;
  wallets: WalletMutations;
};

export type MutationCheckPasswordArgs = {
  password: Scalars['String']['input'];
};

export type MutationLoginArgs = {
  input: LoginInput;
};

export type MutationPayArgs = {
  input: PayInput;
};

export type MutationSignUpArgs = {
  input: SignUpInput;
};

export type NewAccount = {
  __typename?: 'NewAccount';
  access_token: Scalars['String']['output'];
  id: Scalars['String']['output'];
  refresh_token: Scalars['String']['output'];
};

export type PayInput = {
  account_id?: InputMaybe<Scalars['String']['input']>;
  wallet_id?: InputMaybe<Scalars['String']['input']>;
};

export type PayLiquidAddressInput = {
  fee_rate: Scalars['Float']['input'];
  recipients: Array<LiquidRecipientInput>;
  send_all_lbtc?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PayLnAddressInput = {
  address: Scalars['String']['input'];
  amount: Scalars['Float']['input'];
  payment_option?: InputMaybe<LnAddressPaymentOption>;
};

export type PayLnInvoiceInput = {
  invoice: Scalars['String']['input'];
};

export type PayMutations = {
  __typename?: 'PayMutations';
  lightning_invoice: CreateLiquidTransaction;
  liquid_address: CreateLiquidTransaction;
  money_address: CreateLiquidTransaction;
};

export type PayMutationsLightning_InvoiceArgs = {
  input: PayLnInvoiceInput;
};

export type PayMutationsLiquid_AddressArgs = {
  input: PayLiquidAddressInput;
};

export type PayMutationsMoney_AddressArgs = {
  input: PayLnAddressInput;
};

export enum PaymentOptionCode {
  Btc = 'BTC',
  Lightning = 'LIGHTNING',
  Usdt = 'USDT',
}

export enum PaymentOptionNetwork {
  Bitcoin = 'BITCOIN',
  Liquid = 'LIQUID',
}

export type Query = {
  __typename?: 'Query';
  hello: Scalars['String']['output'];
  user: User;
  wallets: WalletQueries;
};

export type RefreshToken = {
  __typename?: 'RefreshToken';
  access_token: Scalars['String']['output'];
  id: Scalars['String']['output'];
  refresh_token: Scalars['String']['output'];
};

export type RefreshWalletInput = {
  full_scan?: InputMaybe<Scalars['Boolean']['input']>;
  wallet_id: Scalars['String']['input'];
};

export type Secp256k1KeyPair = {
  __typename?: 'Secp256k1KeyPair';
  encryption_pubkey: Scalars['String']['output'];
  id: Scalars['String']['output'];
  protected_encryption_private_key: Scalars['String']['output'];
};

export type Secp256k1KeyPairInput = {
  protected_private_key: Scalars['String']['input'];
  public_key: Scalars['String']['input'];
};

export type SendMessage = {
  __typename?: 'SendMessage';
  id: Scalars['String']['output'];
};

export type SendMessageInput = {
  contact_id: Scalars['String']['input'];
  receiver_money_address: Scalars['String']['input'];
  receiver_payload?: InputMaybe<Scalars['String']['input']>;
  sender_payload?: InputMaybe<Scalars['String']['input']>;
};

export type SignUpInput = {
  email: Scalars['String']['input'];
  master_password_hash: Scalars['String']['input'];
  password_hint?: InputMaybe<Scalars['String']['input']>;
  protected_symmetric_key: Scalars['String']['input'];
  secp256k1_key_pair: Secp256k1KeyPairInput;
  wallet?: InputMaybe<CreateWalletInput>;
};

export type SimpleSwap = {
  __typename?: 'SimpleSwap';
  id: Scalars['String']['output'];
};

export type SimpleWallet = {
  __typename?: 'SimpleWallet';
  accounts: Array<SimpleWalletAccount>;
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
};

export type SimpleWalletAccount = {
  __typename?: 'SimpleWalletAccount';
  account_type: WalletAccountType;
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
};

export type SimpleWalletContact = {
  __typename?: 'SimpleWalletContact';
  id: Scalars['String']['output'];
  money_address: Scalars['String']['output'];
};

export type User = {
  __typename?: 'User';
  default_wallet_id?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  id: Scalars['String']['output'];
};

export type Wallet = {
  __typename?: 'Wallet';
  accounts: Array<WalletAccount>;
  contacts: WalletContacts;
  details: WalletDetails;
  id: Scalars['String']['output'];
  money_address: Array<MoneyAddress>;
  name: Scalars['String']['output'];
  secp256k1_key_pair: Secp256k1KeyPair;
  swaps: WalletSwaps;
};

export type WalletAccount = {
  __typename?: 'WalletAccount';
  account_type: WalletAccountType;
  descriptor: Scalars['String']['output'];
  id: Scalars['String']['output'];
  liquid?: Maybe<LiquidAccount>;
  name: Scalars['String']['output'];
};

export enum WalletAccountType {
  Liquid = 'LIQUID',
}

export type WalletContact = {
  __typename?: 'WalletContact';
  encryption_pubkey?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  messages: Array<ContactMessage>;
  money_address: Scalars['String']['output'];
  payment_options?: Maybe<Array<LnUrlCurrency>>;
};

export type WalletContacts = {
  __typename?: 'WalletContacts';
  find_many: Array<SimpleWalletContact>;
  find_one: WalletContact;
  id: Scalars['String']['output'];
};

export type WalletContactsFind_OneArgs = {
  id: Scalars['String']['input'];
};

export type WalletDetails = {
  __typename?: 'WalletDetails';
  id: Scalars['String']['output'];
  protected_mnemonic?: Maybe<Scalars['String']['output']>;
  type: WalletType;
};

export type WalletMutations = {
  __typename?: 'WalletMutations';
  broadcast_liquid_transaction: BroadcastLiquidTransaction;
  create: CreateWallet;
  create_onchain_address: CreateOnchainAddress;
  refresh_wallet: Scalars['Boolean']['output'];
};

export type WalletMutationsBroadcast_Liquid_TransactionArgs = {
  input: BroadcastLiquidTransactionInput;
};

export type WalletMutationsCreateArgs = {
  input: CreateWalletInput;
};

export type WalletMutationsCreate_Onchain_AddressArgs = {
  input: CreateOnchainAddressInput;
};

export type WalletMutationsRefresh_WalletArgs = {
  input: RefreshWalletInput;
};

export type WalletQueries = {
  __typename?: 'WalletQueries';
  find_many: Array<SimpleWallet>;
  find_one: Wallet;
  id: Scalars['String']['output'];
};

export type WalletQueriesFind_OneArgs = {
  id: Scalars['String']['input'];
};

export type WalletSwaps = {
  __typename?: 'WalletSwaps';
  find_many: Array<SimpleSwap>;
  id: Scalars['String']['output'];
};

export enum WalletType {
  ClientGenerated = 'CLIENT_GENERATED',
}
