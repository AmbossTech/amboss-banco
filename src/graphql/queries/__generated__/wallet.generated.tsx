/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type GetAllWalletsQueryVariables = Types.Exact<{ [key: string]: never }>;

export type GetAllWalletsQuery = {
  __typename?: 'Query';
  wallets: {
    __typename?: 'WalletQueries';
    id: string;
    find_many: Array<{
      __typename?: 'SimpleWallet';
      id: string;
      name: string;
      accounts: Array<{
        __typename?: 'SimpleWalletAccount';
        id: string;
        name: string;
        account_type: Types.WalletAccountType;
      }>;
    }>;
  };
};

export type GetWalletQueryVariables = Types.Exact<{
  id: Types.Scalars['String']['input'];
}>;

export type GetWalletQuery = {
  __typename?: 'Query';
  wallets: {
    __typename?: 'WalletQueries';
    id: string;
    find_one: {
      __typename?: 'Wallet';
      id: string;
      name: string;
      accounts: Array<{
        __typename?: 'WalletAccount';
        id: string;
        name: string;
        account_type: Types.WalletAccountType;
        liquid_assets: Array<{
          __typename?: 'WalletLiquidAsset';
          id: string;
          balance: string;
          asset_id: string;
          asset_info: {
            __typename?: 'WalletLiquidAssetInfo';
            id: string;
            name: string;
            is_featured: boolean;
            precision: number;
            ticker: string;
          };
          transactions: Array<{
            __typename?: 'WalletLiquidTransaction';
            id: string;
            tx_id: string;
            date?: string | null;
            fee: string;
            block_height: string;
            balance: string;
            blinded_url: string;
            unblinded_url: string;
          }>;
        }>;
      }>;
    };
  };
};

export const GetAllWalletsDocument = gql`
  query getAllWallets {
    wallets {
      id
      find_many {
        id
        name
        accounts {
          id
          name
          account_type
        }
      }
    }
  }
`;

/**
 * __useGetAllWalletsQuery__
 *
 * To run a query within a React component, call `useGetAllWalletsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllWalletsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllWalletsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllWalletsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAllWalletsQuery,
    GetAllWalletsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetAllWalletsQuery, GetAllWalletsQueryVariables>(
    GetAllWalletsDocument,
    options
  );
}
export function useGetAllWalletsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAllWalletsQuery,
    GetAllWalletsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetAllWalletsQuery, GetAllWalletsQueryVariables>(
    GetAllWalletsDocument,
    options
  );
}
export function useGetAllWalletsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    GetAllWalletsQuery,
    GetAllWalletsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    GetAllWalletsQuery,
    GetAllWalletsQueryVariables
  >(GetAllWalletsDocument, options);
}
export type GetAllWalletsQueryHookResult = ReturnType<
  typeof useGetAllWalletsQuery
>;
export type GetAllWalletsLazyQueryHookResult = ReturnType<
  typeof useGetAllWalletsLazyQuery
>;
export type GetAllWalletsSuspenseQueryHookResult = ReturnType<
  typeof useGetAllWalletsSuspenseQuery
>;
export type GetAllWalletsQueryResult = Apollo.QueryResult<
  GetAllWalletsQuery,
  GetAllWalletsQueryVariables
>;
export const GetWalletDocument = gql`
  query getWallet($id: String!) {
    wallets {
      id
      find_one(id: $id) {
        id
        name
        accounts {
          id
          name
          account_type
          liquid_assets {
            id
            balance
            asset_id
            asset_info {
              id
              name
              is_featured
              precision
              ticker
            }
            transactions {
              id
              tx_id
              date
              fee
              block_height
              balance
              blinded_url
              unblinded_url
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetWalletQuery__
 *
 * To run a query within a React component, call `useGetWalletQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWalletQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWalletQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetWalletQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetWalletQuery,
    GetWalletQueryVariables
  > &
    ({ variables: GetWalletQueryVariables; skip?: boolean } | { skip: boolean })
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetWalletQuery, GetWalletQueryVariables>(
    GetWalletDocument,
    options
  );
}
export function useGetWalletLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWalletQuery,
    GetWalletQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetWalletQuery, GetWalletQueryVariables>(
    GetWalletDocument,
    options
  );
}
export function useGetWalletSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    GetWalletQuery,
    GetWalletQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<GetWalletQuery, GetWalletQueryVariables>(
    GetWalletDocument,
    options
  );
}
export type GetWalletQueryHookResult = ReturnType<typeof useGetWalletQuery>;
export type GetWalletLazyQueryHookResult = ReturnType<
  typeof useGetWalletLazyQuery
>;
export type GetWalletSuspenseQueryHookResult = ReturnType<
  typeof useGetWalletSuspenseQuery
>;
export type GetWalletQueryResult = Apollo.QueryResult<
  GetWalletQuery,
  GetWalletQueryVariables
>;
