/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type GetWalletSwapsQueryVariables = Types.Exact<{
  id: Types.Scalars['String']['input'];
}>;

export type GetWalletSwapsQuery = {
  __typename?: 'Query';
  wallets: {
    __typename?: 'WalletQueries';
    id: string;
    find_one: {
      __typename?: 'Wallet';
      id: string;
      swaps: {
        __typename?: 'WalletSwaps';
        id: string;
        find_many: Array<{ __typename?: 'SimpleSwap'; id: string }>;
      };
    };
  };
};

export const GetWalletSwapsDocument = gql`
  query getWalletSwaps($id: String!) {
    wallets {
      id
      find_one(id: $id) {
        id
        swaps {
          id
          find_many {
            id
          }
        }
      }
    }
  }
`;

/**
 * __useGetWalletSwapsQuery__
 *
 * To run a query within a React component, call `useGetWalletSwapsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWalletSwapsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWalletSwapsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetWalletSwapsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetWalletSwapsQuery,
    GetWalletSwapsQueryVariables
  > &
    (
      | { variables: GetWalletSwapsQueryVariables; skip?: boolean }
      | { skip: boolean }
    )
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetWalletSwapsQuery, GetWalletSwapsQueryVariables>(
    GetWalletSwapsDocument,
    options
  );
}
export function useGetWalletSwapsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWalletSwapsQuery,
    GetWalletSwapsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetWalletSwapsQuery, GetWalletSwapsQueryVariables>(
    GetWalletSwapsDocument,
    options
  );
}
export function useGetWalletSwapsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    GetWalletSwapsQuery,
    GetWalletSwapsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    GetWalletSwapsQuery,
    GetWalletSwapsQueryVariables
  >(GetWalletSwapsDocument, options);
}
export type GetWalletSwapsQueryHookResult = ReturnType<
  typeof useGetWalletSwapsQuery
>;
export type GetWalletSwapsLazyQueryHookResult = ReturnType<
  typeof useGetWalletSwapsLazyQuery
>;
export type GetWalletSwapsSuspenseQueryHookResult = ReturnType<
  typeof useGetWalletSwapsSuspenseQuery
>;
export type GetWalletSwapsQueryResult = Apollo.QueryResult<
  GetWalletSwapsQuery,
  GetWalletSwapsQueryVariables
>;
