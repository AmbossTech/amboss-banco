/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import * as Types from '../../types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type GetWalletsQueryVariables = Types.Exact<{ [key: string]: never }>;

export type GetWalletsQuery = {
  __typename?: 'Query';
  wallets: {
    __typename?: 'WalletQueries';
    id: string;
    find_many: Array<{
      __typename?: 'SimpleWallet';
      id: string;
      name: string;
      accounts: Array<{
        __typename?: 'SimpleWalletAccount';
        id: string;
        name: string;
        account_type: Types.WalletAccountType;
      }>;
    }>;
  };
};

export const GetWalletsDocument = gql`
  query GetWallets {
    wallets {
      id
      find_many {
        id
        name
        accounts {
          id
          name
          account_type
        }
      }
    }
  }
`;

/**
 * __useGetWalletsQuery__
 *
 * To run a query within a React component, call `useGetWalletsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWalletsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWalletsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetWalletsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetWalletsQuery,
    GetWalletsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<GetWalletsQuery, GetWalletsQueryVariables>(
    GetWalletsDocument,
    options
  );
}
export function useGetWalletsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWalletsQuery,
    GetWalletsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<GetWalletsQuery, GetWalletsQueryVariables>(
    GetWalletsDocument,
    options
  );
}
export function useGetWalletsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    GetWalletsQuery,
    GetWalletsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<GetWalletsQuery, GetWalletsQueryVariables>(
    GetWalletsDocument,
    options
  );
}
export type GetWalletsQueryHookResult = ReturnType<typeof useGetWalletsQuery>;
export type GetWalletsLazyQueryHookResult = ReturnType<
  typeof useGetWalletsLazyQuery
>;
export type GetWalletsSuspenseQueryHookResult = ReturnType<
  typeof useGetWalletsSuspenseQuery
>;
export type GetWalletsQueryResult = Apollo.QueryResult<
  GetWalletsQuery,
  GetWalletsQueryVariables
>;
