/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type GetAccountPasskeysQueryVariables = Types.Exact<{
  [key: string]: never;
}>;

export type GetAccountPasskeysQuery = {
  __typename?: 'Query';
  passkey: {
    __typename?: 'PasskeyQueries';
    find_many: Array<{
      __typename?: 'SimplePasskey';
      id: string;
      created_at: string;
      name: string;
      encryption_available: boolean;
      encryption_enabled: boolean;
    }>;
  };
};

export const GetAccountPasskeysDocument = gql`
  query getAccountPasskeys {
    passkey {
      find_many {
        id
        created_at
        name
        encryption_available
        encryption_enabled
      }
    }
  }
`;

/**
 * __useGetAccountPasskeysQuery__
 *
 * To run a query within a React component, call `useGetAccountPasskeysQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountPasskeysQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountPasskeysQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAccountPasskeysQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAccountPasskeysQuery,
    GetAccountPasskeysQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetAccountPasskeysQuery,
    GetAccountPasskeysQueryVariables
  >(GetAccountPasskeysDocument, options);
}
export function useGetAccountPasskeysLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountPasskeysQuery,
    GetAccountPasskeysQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetAccountPasskeysQuery,
    GetAccountPasskeysQueryVariables
  >(GetAccountPasskeysDocument, options);
}
export function useGetAccountPasskeysSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    GetAccountPasskeysQuery,
    GetAccountPasskeysQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    GetAccountPasskeysQuery,
    GetAccountPasskeysQueryVariables
  >(GetAccountPasskeysDocument, options);
}
export type GetAccountPasskeysQueryHookResult = ReturnType<
  typeof useGetAccountPasskeysQuery
>;
export type GetAccountPasskeysLazyQueryHookResult = ReturnType<
  typeof useGetAccountPasskeysLazyQuery
>;
export type GetAccountPasskeysSuspenseQueryHookResult = ReturnType<
  typeof useGetAccountPasskeysSuspenseQuery
>;
export type GetAccountPasskeysQueryResult = Apollo.QueryResult<
  GetAccountPasskeysQuery,
  GetAccountPasskeysQueryVariables
>;
