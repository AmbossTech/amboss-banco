/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import * as Types from '../../types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type GetWalletAccountsQueryVariables = Types.Exact<{
  id: Types.Scalars['String']['input'];
}>;

export type GetWalletAccountsQuery = {
  __typename?: 'Query';
  wallets: {
    __typename?: 'WalletQueries';
    find_one: {
      __typename?: 'Wallet';
      id: string;
      name: string;
      accounts: Array<{
        __typename?: 'WalletAccount';
        id: string;
        name: string;
        account_type: Types.WalletAccountType;
        liquid_assets: Array<{
          __typename?: 'WalletLiquidAsset';
          id: string;
          asset_id: string;
          balance: string;
          asset_info: {
            __typename?: 'WalletLiquidAssetInfo';
            name: string;
            ticker: string;
            precision: number;
            is_featured: boolean;
          };
          transactions: Array<{
            __typename?: 'WalletLiquidTransaction';
            id: string;
            balance: string;
            blinded_url: string;
            unblinded_url: string;
            tx_id: string;
            fee: string;
            date?: string | null;
            block_height: string;
          }>;
        }>;
      }>;
    };
  };
};

export const GetWalletAccountsDocument = gql`
  query GetWalletAccounts($id: String!) {
    wallets {
      find_one(id: $id) {
        id
        name
        accounts {
          id
          name
          account_type
          liquid_assets {
            id
            asset_id
            balance
            asset_info {
              name
              ticker
              precision
              is_featured
            }
            transactions {
              id
              balance
              blinded_url
              unblinded_url
              tx_id
              fee
              date
              block_height
            }
          }
        }
      }
    }
  }
`;

/**
 * __useGetWalletAccountsQuery__
 *
 * To run a query within a React component, call `useGetWalletAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWalletAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWalletAccountsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetWalletAccountsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetWalletAccountsQuery,
    GetWalletAccountsQueryVariables
  > &
    (
      | { variables: GetWalletAccountsQueryVariables; skip?: boolean }
      | { skip: boolean }
    )
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    GetWalletAccountsQuery,
    GetWalletAccountsQueryVariables
  >(GetWalletAccountsDocument, options);
}
export function useGetWalletAccountsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetWalletAccountsQuery,
    GetWalletAccountsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    GetWalletAccountsQuery,
    GetWalletAccountsQueryVariables
  >(GetWalletAccountsDocument, options);
}
export function useGetWalletAccountsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    GetWalletAccountsQuery,
    GetWalletAccountsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    GetWalletAccountsQuery,
    GetWalletAccountsQueryVariables
  >(GetWalletAccountsDocument, options);
}
export type GetWalletAccountsQueryHookResult = ReturnType<
  typeof useGetWalletAccountsQuery
>;
export type GetWalletAccountsLazyQueryHookResult = ReturnType<
  typeof useGetWalletAccountsLazyQuery
>;
export type GetWalletAccountsSuspenseQueryHookResult = ReturnType<
  typeof useGetWalletAccountsSuspenseQuery
>;
export type GetWalletAccountsQueryResult = Apollo.QueryResult<
  GetWalletAccountsQuery,
  GetWalletAccountsQueryVariables
>;
