/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type BroadcastLiquidTransactionMutationVariables = Types.Exact<{
  input: Types.BroadcastLiquidTransactionInput;
}>;

export type BroadcastLiquidTransactionMutation = {
  __typename?: 'Mutation';
  wallets: {
    __typename?: 'WalletMutations';
    broadcast_liquid_transaction: {
      __typename?: 'BroadcastLiquidTransaction';
      tx_id: string;
    };
  };
};

export const BroadcastLiquidTransactionDocument = gql`
  mutation BroadcastLiquidTransaction(
    $input: BroadcastLiquidTransactionInput!
  ) {
    wallets {
      broadcast_liquid_transaction(input: $input) {
        tx_id
      }
    }
  }
`;
export type BroadcastLiquidTransactionMutationFn = Apollo.MutationFunction<
  BroadcastLiquidTransactionMutation,
  BroadcastLiquidTransactionMutationVariables
>;

/**
 * __useBroadcastLiquidTransactionMutation__
 *
 * To run a mutation, you first call `useBroadcastLiquidTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBroadcastLiquidTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [broadcastLiquidTransactionMutation, { data, loading, error }] = useBroadcastLiquidTransactionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBroadcastLiquidTransactionMutation(
  baseOptions?: Apollo.MutationHookOptions<
    BroadcastLiquidTransactionMutation,
    BroadcastLiquidTransactionMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    BroadcastLiquidTransactionMutation,
    BroadcastLiquidTransactionMutationVariables
  >(BroadcastLiquidTransactionDocument, options);
}
export type BroadcastLiquidTransactionMutationHookResult = ReturnType<
  typeof useBroadcastLiquidTransactionMutation
>;
export type BroadcastLiquidTransactionMutationResult =
  Apollo.MutationResult<BroadcastLiquidTransactionMutation>;
export type BroadcastLiquidTransactionMutationOptions =
  Apollo.BaseMutationOptions<
    BroadcastLiquidTransactionMutation,
    BroadcastLiquidTransactionMutationVariables
  >;
