/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type CheckPasswordMutationVariables = Types.Exact<{
  password: Types.Scalars['String']['input'];
}>;

export type CheckPasswordMutation = {
  __typename?: 'Mutation';
  password: { __typename?: 'PasswordMutations'; check: boolean };
};

export const CheckPasswordDocument = gql`
  mutation CheckPassword($password: String!) {
    password {
      check(password: $password)
    }
  }
`;
export type CheckPasswordMutationFn = Apollo.MutationFunction<
  CheckPasswordMutation,
  CheckPasswordMutationVariables
>;

/**
 * __useCheckPasswordMutation__
 *
 * To run a mutation, you first call `useCheckPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCheckPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [checkPasswordMutation, { data, loading, error }] = useCheckPasswordMutation({
 *   variables: {
 *      password: // value for 'password'
 *   },
 * });
 */
export function useCheckPasswordMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CheckPasswordMutation,
    CheckPasswordMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CheckPasswordMutation,
    CheckPasswordMutationVariables
  >(CheckPasswordDocument, options);
}
export type CheckPasswordMutationHookResult = ReturnType<
  typeof useCheckPasswordMutation
>;
export type CheckPasswordMutationResult =
  Apollo.MutationResult<CheckPasswordMutation>;
export type CheckPasswordMutationOptions = Apollo.BaseMutationOptions<
  CheckPasswordMutation,
  CheckPasswordMutationVariables
>;
