/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type CreateOnchainAddressSwapMutationVariables = Types.Exact<{
  input: Types.ReceiveSwapInput;
}>;

export type CreateOnchainAddressSwapMutation = {
  __typename?: 'Mutation';
  wallets: {
    __typename?: 'WalletMutations';
    create_onchain_address_swap: {
      __typename?: 'ReceiveSwap';
      bip21?: string | null;
      id: string;
      receive_address: string;
    };
  };
};

export const CreateOnchainAddressSwapDocument = gql`
  mutation CreateOnchainAddressSwap($input: ReceiveSwapInput!) {
    wallets {
      create_onchain_address_swap(input: $input) {
        bip21
        id
        receive_address
      }
    }
  }
`;
export type CreateOnchainAddressSwapMutationFn = Apollo.MutationFunction<
  CreateOnchainAddressSwapMutation,
  CreateOnchainAddressSwapMutationVariables
>;

/**
 * __useCreateOnchainAddressSwapMutation__
 *
 * To run a mutation, you first call `useCreateOnchainAddressSwapMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOnchainAddressSwapMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOnchainAddressSwapMutation, { data, loading, error }] = useCreateOnchainAddressSwapMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOnchainAddressSwapMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateOnchainAddressSwapMutation,
    CreateOnchainAddressSwapMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateOnchainAddressSwapMutation,
    CreateOnchainAddressSwapMutationVariables
  >(CreateOnchainAddressSwapDocument, options);
}
export type CreateOnchainAddressSwapMutationHookResult = ReturnType<
  typeof useCreateOnchainAddressSwapMutation
>;
export type CreateOnchainAddressSwapMutationResult =
  Apollo.MutationResult<CreateOnchainAddressSwapMutation>;
export type CreateOnchainAddressSwapMutationOptions =
  Apollo.BaseMutationOptions<
    CreateOnchainAddressSwapMutation,
    CreateOnchainAddressSwapMutationVariables
  >;
