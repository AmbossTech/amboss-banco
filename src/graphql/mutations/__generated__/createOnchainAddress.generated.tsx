/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type CreateOnchainAddressMutationVariables = Types.Exact<{
  input: Types.CreateOnchainAddressInput;
}>;

export type CreateOnchainAddressMutation = {
  __typename?: 'Mutation';
  wallets: {
    __typename?: 'WalletMutations';
    create_onchain_address: {
      __typename?: 'CreateOnchainAddress';
      address: string;
      bip21?: string | null;
      network: Types.OnchainAddressType;
    };
  };
};

export const CreateOnchainAddressDocument = gql`
  mutation CreateOnchainAddress($input: CreateOnchainAddressInput!) {
    wallets {
      create_onchain_address(input: $input) {
        address
        bip21
        network
      }
    }
  }
`;
export type CreateOnchainAddressMutationFn = Apollo.MutationFunction<
  CreateOnchainAddressMutation,
  CreateOnchainAddressMutationVariables
>;

/**
 * __useCreateOnchainAddressMutation__
 *
 * To run a mutation, you first call `useCreateOnchainAddressMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOnchainAddressMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOnchainAddressMutation, { data, loading, error }] = useCreateOnchainAddressMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOnchainAddressMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateOnchainAddressMutation,
    CreateOnchainAddressMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateOnchainAddressMutation,
    CreateOnchainAddressMutationVariables
  >(CreateOnchainAddressDocument, options);
}
export type CreateOnchainAddressMutationHookResult = ReturnType<
  typeof useCreateOnchainAddressMutation
>;
export type CreateOnchainAddressMutationResult =
  Apollo.MutationResult<CreateOnchainAddressMutation>;
export type CreateOnchainAddressMutationOptions = Apollo.BaseMutationOptions<
  CreateOnchainAddressMutation,
  CreateOnchainAddressMutationVariables
>;
