/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type CreateWalletMutationVariables = Types.Exact<{
  input: Types.CreateWalletInput;
}>;

export type CreateWalletMutation = {
  __typename?: 'Mutation';
  wallets: {
    __typename?: 'WalletMutations';
    create: { __typename?: 'CreateWallet'; id: string };
  };
};

export type ChangeWalletNameMutationVariables = Types.Exact<{
  id: Types.Scalars['String']['input'];
  name: Types.Scalars['String']['input'];
}>;

export type ChangeWalletNameMutation = {
  __typename?: 'Mutation';
  wallets: { __typename?: 'WalletMutations'; change_name: boolean };
};

export const CreateWalletDocument = gql`
  mutation CreateWallet($input: CreateWalletInput!) {
    wallets {
      create(input: $input) {
        id
      }
    }
  }
`;
export type CreateWalletMutationFn = Apollo.MutationFunction<
  CreateWalletMutation,
  CreateWalletMutationVariables
>;

/**
 * __useCreateWalletMutation__
 *
 * To run a mutation, you first call `useCreateWalletMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateWalletMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createWalletMutation, { data, loading, error }] = useCreateWalletMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateWalletMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateWalletMutation,
    CreateWalletMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateWalletMutation,
    CreateWalletMutationVariables
  >(CreateWalletDocument, options);
}
export type CreateWalletMutationHookResult = ReturnType<
  typeof useCreateWalletMutation
>;
export type CreateWalletMutationResult =
  Apollo.MutationResult<CreateWalletMutation>;
export type CreateWalletMutationOptions = Apollo.BaseMutationOptions<
  CreateWalletMutation,
  CreateWalletMutationVariables
>;
export const ChangeWalletNameDocument = gql`
  mutation ChangeWalletName($id: String!, $name: String!) {
    wallets {
      change_name(id: $id, name: $name)
    }
  }
`;
export type ChangeWalletNameMutationFn = Apollo.MutationFunction<
  ChangeWalletNameMutation,
  ChangeWalletNameMutationVariables
>;

/**
 * __useChangeWalletNameMutation__
 *
 * To run a mutation, you first call `useChangeWalletNameMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeWalletNameMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeWalletNameMutation, { data, loading, error }] = useChangeWalletNameMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useChangeWalletNameMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ChangeWalletNameMutation,
    ChangeWalletNameMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    ChangeWalletNameMutation,
    ChangeWalletNameMutationVariables
  >(ChangeWalletNameDocument, options);
}
export type ChangeWalletNameMutationHookResult = ReturnType<
  typeof useChangeWalletNameMutation
>;
export type ChangeWalletNameMutationResult =
  Apollo.MutationResult<ChangeWalletNameMutation>;
export type ChangeWalletNameMutationOptions = Apollo.BaseMutationOptions<
  ChangeWalletNameMutation,
  ChangeWalletNameMutationVariables
>;
