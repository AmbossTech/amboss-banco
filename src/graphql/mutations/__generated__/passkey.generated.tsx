/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type TwoFactorPasskeyAddMutationVariables = Types.Exact<{
  [key: string]: never;
}>;

export type TwoFactorPasskeyAddMutation = {
  __typename?: 'Mutation';
  two_factor: {
    __typename?: 'TwoFactorMutations';
    passkey: {
      __typename?: 'TwoFactorPasskeyMutations';
      add: { __typename?: 'CreateTwoFactorPasskey'; options: string };
    };
  };
};

export type TwoFactorPasskeyVerifyMutationVariables = Types.Exact<{
  options: Types.Scalars['String']['input'];
}>;

export type TwoFactorPasskeyVerifyMutation = {
  __typename?: 'Mutation';
  two_factor: {
    __typename?: 'TwoFactorMutations';
    passkey: { __typename?: 'TwoFactorPasskeyMutations'; verify: boolean };
  };
};

export type TwoFactorPasskeyAuthInitMutationVariables = Types.Exact<{
  input: Types.TwoFactorPasskeyAuthInput;
}>;

export type TwoFactorPasskeyAuthInitMutation = {
  __typename?: 'Mutation';
  login: {
    __typename?: 'LoginMutations';
    two_factor: {
      __typename?: 'TwoFactorLoginMutations';
      passkey: {
        __typename?: 'TwoFactorPasskeyLoginMutations';
        options: string;
      };
    };
  };
};

export type TwoFactorPasskeyAuthLoginMutationVariables = Types.Exact<{
  input: Types.TwoFactorPasskeyAuthLoginInput;
}>;

export type TwoFactorPasskeyAuthLoginMutation = {
  __typename?: 'Mutation';
  login: {
    __typename?: 'LoginMutations';
    two_factor: {
      __typename?: 'TwoFactorLoginMutations';
      passkey: {
        __typename?: 'TwoFactorPasskeyLoginMutations';
        login: {
          __typename?: 'Login';
          access_token?: string | null;
          refresh_token?: string | null;
        };
      };
    };
  };
};

export const TwoFactorPasskeyAddDocument = gql`
  mutation TwoFactorPasskeyAdd {
    two_factor {
      passkey {
        add {
          options
        }
      }
    }
  }
`;
export type TwoFactorPasskeyAddMutationFn = Apollo.MutationFunction<
  TwoFactorPasskeyAddMutation,
  TwoFactorPasskeyAddMutationVariables
>;

/**
 * __useTwoFactorPasskeyAddMutation__
 *
 * To run a mutation, you first call `useTwoFactorPasskeyAddMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTwoFactorPasskeyAddMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [twoFactorPasskeyAddMutation, { data, loading, error }] = useTwoFactorPasskeyAddMutation({
 *   variables: {
 *   },
 * });
 */
export function useTwoFactorPasskeyAddMutation(
  baseOptions?: Apollo.MutationHookOptions<
    TwoFactorPasskeyAddMutation,
    TwoFactorPasskeyAddMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    TwoFactorPasskeyAddMutation,
    TwoFactorPasskeyAddMutationVariables
  >(TwoFactorPasskeyAddDocument, options);
}
export type TwoFactorPasskeyAddMutationHookResult = ReturnType<
  typeof useTwoFactorPasskeyAddMutation
>;
export type TwoFactorPasskeyAddMutationResult =
  Apollo.MutationResult<TwoFactorPasskeyAddMutation>;
export type TwoFactorPasskeyAddMutationOptions = Apollo.BaseMutationOptions<
  TwoFactorPasskeyAddMutation,
  TwoFactorPasskeyAddMutationVariables
>;
export const TwoFactorPasskeyVerifyDocument = gql`
  mutation TwoFactorPasskeyVerify($options: String!) {
    two_factor {
      passkey {
        verify(options: $options)
      }
    }
  }
`;
export type TwoFactorPasskeyVerifyMutationFn = Apollo.MutationFunction<
  TwoFactorPasskeyVerifyMutation,
  TwoFactorPasskeyVerifyMutationVariables
>;

/**
 * __useTwoFactorPasskeyVerifyMutation__
 *
 * To run a mutation, you first call `useTwoFactorPasskeyVerifyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTwoFactorPasskeyVerifyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [twoFactorPasskeyVerifyMutation, { data, loading, error }] = useTwoFactorPasskeyVerifyMutation({
 *   variables: {
 *      options: // value for 'options'
 *   },
 * });
 */
export function useTwoFactorPasskeyVerifyMutation(
  baseOptions?: Apollo.MutationHookOptions<
    TwoFactorPasskeyVerifyMutation,
    TwoFactorPasskeyVerifyMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    TwoFactorPasskeyVerifyMutation,
    TwoFactorPasskeyVerifyMutationVariables
  >(TwoFactorPasskeyVerifyDocument, options);
}
export type TwoFactorPasskeyVerifyMutationHookResult = ReturnType<
  typeof useTwoFactorPasskeyVerifyMutation
>;
export type TwoFactorPasskeyVerifyMutationResult =
  Apollo.MutationResult<TwoFactorPasskeyVerifyMutation>;
export type TwoFactorPasskeyVerifyMutationOptions = Apollo.BaseMutationOptions<
  TwoFactorPasskeyVerifyMutation,
  TwoFactorPasskeyVerifyMutationVariables
>;
export const TwoFactorPasskeyAuthInitDocument = gql`
  mutation TwoFactorPasskeyAuthInit($input: TwoFactorPasskeyAuthInput!) {
    login {
      two_factor {
        passkey {
          options(input: $input)
        }
      }
    }
  }
`;
export type TwoFactorPasskeyAuthInitMutationFn = Apollo.MutationFunction<
  TwoFactorPasskeyAuthInitMutation,
  TwoFactorPasskeyAuthInitMutationVariables
>;

/**
 * __useTwoFactorPasskeyAuthInitMutation__
 *
 * To run a mutation, you first call `useTwoFactorPasskeyAuthInitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTwoFactorPasskeyAuthInitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [twoFactorPasskeyAuthInitMutation, { data, loading, error }] = useTwoFactorPasskeyAuthInitMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTwoFactorPasskeyAuthInitMutation(
  baseOptions?: Apollo.MutationHookOptions<
    TwoFactorPasskeyAuthInitMutation,
    TwoFactorPasskeyAuthInitMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    TwoFactorPasskeyAuthInitMutation,
    TwoFactorPasskeyAuthInitMutationVariables
  >(TwoFactorPasskeyAuthInitDocument, options);
}
export type TwoFactorPasskeyAuthInitMutationHookResult = ReturnType<
  typeof useTwoFactorPasskeyAuthInitMutation
>;
export type TwoFactorPasskeyAuthInitMutationResult =
  Apollo.MutationResult<TwoFactorPasskeyAuthInitMutation>;
export type TwoFactorPasskeyAuthInitMutationOptions =
  Apollo.BaseMutationOptions<
    TwoFactorPasskeyAuthInitMutation,
    TwoFactorPasskeyAuthInitMutationVariables
  >;
export const TwoFactorPasskeyAuthLoginDocument = gql`
  mutation TwoFactorPasskeyAuthLogin($input: TwoFactorPasskeyAuthLoginInput!) {
    login {
      two_factor {
        passkey {
          login(input: $input) {
            access_token
            refresh_token
          }
        }
      }
    }
  }
`;
export type TwoFactorPasskeyAuthLoginMutationFn = Apollo.MutationFunction<
  TwoFactorPasskeyAuthLoginMutation,
  TwoFactorPasskeyAuthLoginMutationVariables
>;

/**
 * __useTwoFactorPasskeyAuthLoginMutation__
 *
 * To run a mutation, you first call `useTwoFactorPasskeyAuthLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTwoFactorPasskeyAuthLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [twoFactorPasskeyAuthLoginMutation, { data, loading, error }] = useTwoFactorPasskeyAuthLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTwoFactorPasskeyAuthLoginMutation(
  baseOptions?: Apollo.MutationHookOptions<
    TwoFactorPasskeyAuthLoginMutation,
    TwoFactorPasskeyAuthLoginMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    TwoFactorPasskeyAuthLoginMutation,
    TwoFactorPasskeyAuthLoginMutationVariables
  >(TwoFactorPasskeyAuthLoginDocument, options);
}
export type TwoFactorPasskeyAuthLoginMutationHookResult = ReturnType<
  typeof useTwoFactorPasskeyAuthLoginMutation
>;
export type TwoFactorPasskeyAuthLoginMutationResult =
  Apollo.MutationResult<TwoFactorPasskeyAuthLoginMutation>;
export type TwoFactorPasskeyAuthLoginMutationOptions =
  Apollo.BaseMutationOptions<
    TwoFactorPasskeyAuthLoginMutation,
    TwoFactorPasskeyAuthLoginMutationVariables
  >;
