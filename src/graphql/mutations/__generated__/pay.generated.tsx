/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type PayLightningAddressMutationVariables = Types.Exact<{
  addressInput: Types.PayLnAddressInput;
  payInput: Types.PayInput;
}>;

export type PayLightningAddressMutation = {
  __typename?: 'Mutation';
  pay: {
    __typename?: 'PayMutations';
    lightning_address: {
      __typename?: 'CreateLiquidTransaction';
      base_64: string;
      wallet_account: {
        __typename?: 'WalletAccount';
        id: string;
        descriptor: string;
      };
    };
  };
};

export const PayLightningAddressDocument = gql`
  mutation PayLightningAddress(
    $addressInput: PayLnAddressInput!
    $payInput: PayInput!
  ) {
    pay(input: $payInput) {
      lightning_address(input: $addressInput) {
        wallet_account {
          id
          descriptor
        }
        base_64
      }
    }
  }
`;
export type PayLightningAddressMutationFn = Apollo.MutationFunction<
  PayLightningAddressMutation,
  PayLightningAddressMutationVariables
>;

/**
 * __usePayLightningAddressMutation__
 *
 * To run a mutation, you first call `usePayLightningAddressMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePayLightningAddressMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [payLightningAddressMutation, { data, loading, error }] = usePayLightningAddressMutation({
 *   variables: {
 *      addressInput: // value for 'addressInput'
 *      payInput: // value for 'payInput'
 *   },
 * });
 */
export function usePayLightningAddressMutation(
  baseOptions?: Apollo.MutationHookOptions<
    PayLightningAddressMutation,
    PayLightningAddressMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    PayLightningAddressMutation,
    PayLightningAddressMutationVariables
  >(PayLightningAddressDocument, options);
}
export type PayLightningAddressMutationHookResult = ReturnType<
  typeof usePayLightningAddressMutation
>;
export type PayLightningAddressMutationResult =
  Apollo.MutationResult<PayLightningAddressMutation>;
export type PayLightningAddressMutationOptions = Apollo.BaseMutationOptions<
  PayLightningAddressMutation,
  PayLightningAddressMutationVariables
>;
